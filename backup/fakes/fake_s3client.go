// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/tscolari/s3kup/backup"
	"github.com/tscolari/s3kup/s3"
)

type FakeS3Client struct {
	StoreStub        func(path string, content []byte) error
	storeMutex       sync.RWMutex
	storeArgsForCall []struct {
		path    string
		content []byte
	}
	storeReturns struct {
		result1 error
	}
	ListStub        func(path string) (versions s3.Versions, err error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		path string
	}
	listReturns struct {
		result1 s3.Versions
		result2 error
	}
	DeleteStub        func(path string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		path string
	}
	deleteReturns struct {
		result1 error
	}
}

func (fake *FakeS3Client) Store(path string, content []byte) error {
	fake.storeMutex.Lock()
	fake.storeArgsForCall = append(fake.storeArgsForCall, struct {
		path    string
		content []byte
	}{path, content})
	fake.storeMutex.Unlock()
	if fake.StoreStub != nil {
		return fake.StoreStub(path, content)
	} else {
		return fake.storeReturns.result1
	}
}

func (fake *FakeS3Client) StoreCallCount() int {
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	return len(fake.storeArgsForCall)
}

func (fake *FakeS3Client) StoreArgsForCall(i int) (string, []byte) {
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	return fake.storeArgsForCall[i].path, fake.storeArgsForCall[i].content
}

func (fake *FakeS3Client) StoreReturns(result1 error) {
	fake.StoreStub = nil
	fake.storeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3Client) List(path string) (versions s3.Versions, err error) {
	fake.listMutex.Lock()
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		path string
	}{path})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(path)
	} else {
		return fake.listReturns.result1, fake.listReturns.result2
	}
}

func (fake *FakeS3Client) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeS3Client) ListArgsForCall(i int) string {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.listArgsForCall[i].path
}

func (fake *FakeS3Client) ListReturns(result1 s3.Versions, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 s3.Versions
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) Delete(path string) error {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		path string
	}{path})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(path)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeS3Client) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeS3Client) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].path
}

func (fake *FakeS3Client) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

var _ backup.S3Client = new(FakeS3Client)
